import conn from './conn';
let editor;
export function updateEditor({ value, language }) {
    require(['vs/editor/editor.main'], () => {
        if (typeof monaco !== 'undefined' && typeof editor !== 'undefined') {
            editor.setValue(value);
            const lang = editor.getModel();
            if (!lang)
                throw new Error('Editor has no model');
            monaco.editor.setModelLanguage(lang, language);
        }
    });
}
function setupKeyBindings(editor, client) {
    // save
    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, function () {
        client.keyCommand({
            cmd: true,
            keys: ['s']
        });
    }, '');
    // save all
    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyMod.Shift | monaco.KeyCode.KEY_S, function () {
        client.keyCommand({
            cmd: true,
            shift: true,
            keys: ['s']
        });
    }, '');
}
function installResizeWatcher(el, fn, interval) {
    let offset = { width: el.offsetWidth, height: el.offsetHeight };
    setInterval(() => {
        const newOffset = { width: el.offsetWidth, height: el.offsetHeight };
        if (offset.height !== newOffset.height ||
            offset.width !== newOffset.width) {
            offset = newOffset;
            fn();
        }
    }, interval);
}
export function setupEditor(cfg) {
    require(['vs/editor/editor.main'], async () => {
        if (typeof monaco !== 'undefined') {
            const wrapper = window.document.getElementById('monaco-editor-wrapper');
            if (!wrapper) {
                throw new Error('No wrapper found');
            }
            const { language, theme, value } = cfg;
            const ed = (editor = window.editor = monaco.editor.create(wrapper, {
                language,
                theme,
                value
            }));
            const client = await conn.promise;
            ed.onDidChangeModelContent(event => {
                if (!event) {
                    return;
                }
                client.onValueChanged({
                    event,
                    value: ed.getValue()
                });
            });
            client.onReady();
            setupKeyBindings(ed, client);
            installResizeWatcher(wrapper, editor.layout.bind(editor), 2000);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZWRpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMxQixJQUFJLE1BQW9ELENBQUM7QUFFekQsTUFBTSxVQUFVLFlBQVksQ0FBQyxFQUMzQixLQUFLLEVBQ0wsUUFBUSxFQUlUO0lBQ0MsT0FBTyxDQUFDLENBQUMsdUJBQXVCLENBQUMsRUFBRSxHQUFHLEVBQUU7UUFDdEMsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxFQUFFO1lBQ2xFLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxJQUFJO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQ3ZCLE1BQXdDLEVBQ3hDLE1BQVc7SUFFWCxPQUFPO0lBQ1AsTUFBTSxDQUFDLFVBQVUsQ0FDZixNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssRUFDNUM7UUFDRSxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ2hCLEdBQUcsRUFBRSxJQUFJO1lBQ1QsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDO1NBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUNELEVBQUUsQ0FDSCxDQUFDO0lBQ0YsV0FBVztJQUNYLE1BQU0sQ0FBQyxVQUFVLENBQ2YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQ2xFO1FBQ0UsTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUNoQixHQUFHLEVBQUUsSUFBSTtZQUNULEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDO1NBQ1osQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUNELEVBQUUsQ0FDSCxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQzNCLEVBQWUsRUFDZixFQUEyQixFQUMzQixRQUFnQjtJQUVoQixJQUFJLE1BQU0sR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsV0FBVyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEUsV0FBVyxDQUFDLEdBQUcsRUFBRTtRQUNmLE1BQU0sU0FBUyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNyRSxJQUNFLE1BQU0sQ0FBQyxNQUFNLEtBQUssU0FBUyxDQUFDLE1BQU07WUFDbEMsTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsS0FBSyxFQUNoQztZQUNBLE1BQU0sR0FBRyxTQUFTLENBQUM7WUFDbkIsRUFBRSxFQUFFLENBQUM7U0FDTjtJQUNILENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEdBSTNCO0lBQ0MsT0FBTyxDQUFDLENBQUMsdUJBQXVCLENBQUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM1QyxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3hFLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ1osTUFBTSxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO2FBQ3JDO1lBQ0QsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ3ZDLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUNqRSxRQUFRO2dCQUNSLEtBQUs7Z0JBQ0wsS0FBSzthQUNOLENBQUMsQ0FBQyxDQUFDO1lBQ0osTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ2xDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDakMsSUFBSSxDQUFDLEtBQUssRUFBRTtvQkFDVixPQUFPO2lCQUNSO2dCQUNELE1BQU0sQ0FBQyxjQUFjLENBQUM7b0JBQ3BCLEtBQUs7b0JBQ0wsS0FBSyxFQUFFLEVBQUUsQ0FBQyxRQUFRLEVBQUU7aUJBQ3JCLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFBO1lBRWhCLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM3QixvQkFBb0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBtb24gZnJvbSAnbW9uYWNvLWVkaXRvcic7XG5pbXBvcnQgY29ubiBmcm9tICcuL2Nvbm4nO1xubGV0IGVkaXRvcjogdW5kZWZpbmVkIHwgbW9uLmVkaXRvci5JU3RhbmRhbG9uZUNvZGVFZGl0b3I7XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFZGl0b3Ioe1xuICB2YWx1ZSxcbiAgbGFuZ3VhZ2Vcbn06IHtcbiAgdmFsdWU6IHN0cmluZztcbiAgbGFuZ3VhZ2U6ICd0eXBlc2NyaXB0JyB8ICdqYXZhc2NyaXB0Jztcbn0pIHtcbiAgcmVxdWlyZShbJ3ZzL2VkaXRvci9lZGl0b3IubWFpbiddLCAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBtb25hY28gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBlZGl0b3IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlZGl0b3Iuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgY29uc3QgbGFuZyA9IGVkaXRvci5nZXRNb2RlbCgpO1xuICAgICAgaWYgKCFsYW5nKSB0aHJvdyBuZXcgRXJyb3IoJ0VkaXRvciBoYXMgbm8gbW9kZWwnKTtcbiAgICAgIG1vbmFjby5lZGl0b3Iuc2V0TW9kZWxMYW5ndWFnZShsYW5nLCBsYW5ndWFnZSk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0dXBLZXlCaW5kaW5ncyhcbiAgZWRpdG9yOiBtb24uZWRpdG9yLklTdGFuZGFsb25lQ29kZUVkaXRvcixcbiAgY2xpZW50OiBhbnlcbikge1xuICAvLyBzYXZlXG4gIGVkaXRvci5hZGRDb21tYW5kKFxuICAgIG1vbmFjby5LZXlNb2QuQ3RybENtZCB8IG1vbmFjby5LZXlDb2RlLktFWV9TLFxuICAgIGZ1bmN0aW9uKCkge1xuICAgICAgY2xpZW50LmtleUNvbW1hbmQoe1xuICAgICAgICBjbWQ6IHRydWUsXG4gICAgICAgIGtleXM6IFsncyddXG4gICAgICB9KTtcbiAgICB9LFxuICAgICcnXG4gICk7XG4gIC8vIHNhdmUgYWxsXG4gIGVkaXRvci5hZGRDb21tYW5kKFxuICAgIG1vbmFjby5LZXlNb2QuQ3RybENtZCB8IG1vbmFjby5LZXlNb2QuU2hpZnQgfCBtb25hY28uS2V5Q29kZS5LRVlfUyxcbiAgICBmdW5jdGlvbigpIHtcbiAgICAgIGNsaWVudC5rZXlDb21tYW5kKHtcbiAgICAgICAgY21kOiB0cnVlLFxuICAgICAgICBzaGlmdDogdHJ1ZSxcbiAgICAgICAga2V5czogWydzJ11cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgJydcbiAgKTtcbn1cblxuZnVuY3Rpb24gaW5zdGFsbFJlc2l6ZVdhdGNoZXIoXG4gIGVsOiBIVE1MRWxlbWVudCxcbiAgZm46ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55LFxuICBpbnRlcnZhbDogbnVtYmVyXG4pIHtcbiAgbGV0IG9mZnNldCA9IHsgd2lkdGg6IGVsLm9mZnNldFdpZHRoLCBoZWlnaHQ6IGVsLm9mZnNldEhlaWdodCB9O1xuICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgY29uc3QgbmV3T2Zmc2V0ID0geyB3aWR0aDogZWwub2Zmc2V0V2lkdGgsIGhlaWdodDogZWwub2Zmc2V0SGVpZ2h0IH07XG4gICAgaWYgKFxuICAgICAgb2Zmc2V0LmhlaWdodCAhPT0gbmV3T2Zmc2V0LmhlaWdodCB8fFxuICAgICAgb2Zmc2V0LndpZHRoICE9PSBuZXdPZmZzZXQud2lkdGhcbiAgICApIHtcbiAgICAgIG9mZnNldCA9IG5ld09mZnNldDtcbiAgICAgIGZuKCk7XG4gICAgfVxuICB9LCBpbnRlcnZhbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEVkaXRvcihjZmc6IHtcbiAgdGhlbWU6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbiAgbGFuZ3VhZ2U6ICd0eXBlc2NyaXB0JyB8ICdqYXZhc2NyaXB0Jztcbn0pIHtcbiAgcmVxdWlyZShbJ3ZzL2VkaXRvci9lZGl0b3IubWFpbiddLCBhc3luYyAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBtb25hY28gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCB3cmFwcGVyID0gd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb25hY28tZWRpdG9yLXdyYXBwZXInKTtcbiAgICAgIGlmICghd3JhcHBlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHdyYXBwZXIgZm91bmQnKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgbGFuZ3VhZ2UsIHRoZW1lLCB2YWx1ZSB9ID0gY2ZnO1xuICAgICAgY29uc3QgZWQgPSAoZWRpdG9yID0gd2luZG93LmVkaXRvciA9IG1vbmFjby5lZGl0b3IuY3JlYXRlKHdyYXBwZXIsIHtcbiAgICAgICAgbGFuZ3VhZ2UsXG4gICAgICAgIHRoZW1lLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSkpO1xuICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgY29ubi5wcm9taXNlO1xuICAgICAgZWQub25EaWRDaGFuZ2VNb2RlbENvbnRlbnQoZXZlbnQgPT4ge1xuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsaWVudC5vblZhbHVlQ2hhbmdlZCh7XG4gICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgdmFsdWU6IGVkLmdldFZhbHVlKClcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgY2xpZW50Lm9uUmVhZHkoKVxuXG4gICAgICBzZXR1cEtleUJpbmRpbmdzKGVkLCBjbGllbnQpO1xuICAgICAgaW5zdGFsbFJlc2l6ZVdhdGNoZXIod3JhcHBlciwgZWRpdG9yLmxheW91dC5iaW5kKGVkaXRvciksIDIwMDApO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=